// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	ListCompletedRequest
	ListCompletedResponse
	DownloadFileRequest
	DownloadFileResponse
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ListCompletedRequest struct {
}

func (m *ListCompletedRequest) Reset()                    { *m = ListCompletedRequest{} }
func (m *ListCompletedRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCompletedRequest) ProtoMessage()               {}
func (*ListCompletedRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{0} }

type ListCompletedResponse struct {
	Files []string `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *ListCompletedResponse) Reset()                    { *m = ListCompletedResponse{} }
func (m *ListCompletedResponse) String() string            { return proto.CompactTextString(m) }
func (*ListCompletedResponse) ProtoMessage()               {}
func (*ListCompletedResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{1} }

func (m *ListCompletedResponse) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

type DownloadFileRequest struct {
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *DownloadFileRequest) Reset()                    { *m = DownloadFileRequest{} }
func (m *DownloadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadFileRequest) ProtoMessage()               {}
func (*DownloadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{2} }

func (m *DownloadFileRequest) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

type DownloadFileResponse struct {
	SizeInBytes int64  `protobuf:"varint,1,opt,name=sizeInBytes,proto3" json:"sizeInBytes,omitempty"`
	Blake2B     []byte `protobuf:"bytes,2,opt,name=blake2B,proto3" json:"blake2B,omitempty"`
	Data        []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	IsLastChunk bool   `protobuf:"varint,4,opt,name=isLastChunk,proto3" json:"isLastChunk,omitempty"`
}

func (m *DownloadFileResponse) Reset()                    { *m = DownloadFileResponse{} }
func (m *DownloadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*DownloadFileResponse) ProtoMessage()               {}
func (*DownloadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{3} }

func (m *DownloadFileResponse) GetSizeInBytes() int64 {
	if m != nil {
		return m.SizeInBytes
	}
	return 0
}

func (m *DownloadFileResponse) GetBlake2B() []byte {
	if m != nil {
		return m.Blake2B
	}
	return nil
}

func (m *DownloadFileResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DownloadFileResponse) GetIsLastChunk() bool {
	if m != nil {
		return m.IsLastChunk
	}
	return false
}

func init() {
	proto.RegisterType((*ListCompletedRequest)(nil), "ds_sync.ListCompletedRequest")
	proto.RegisterType((*ListCompletedResponse)(nil), "ds_sync.ListCompletedResponse")
	proto.RegisterType((*DownloadFileRequest)(nil), "ds_sync.DownloadFileRequest")
	proto.RegisterType((*DownloadFileResponse)(nil), "ds_sync.DownloadFileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceDSSync service

type ServiceDSSyncClient interface {
	ListCompleted(ctx context.Context, in *ListCompletedRequest, opts ...grpc.CallOption) (*ListCompletedResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (ServiceDSSync_DownloadFileClient, error)
}

type serviceDSSyncClient struct {
	cc *grpc.ClientConn
}

func NewServiceDSSyncClient(cc *grpc.ClientConn) ServiceDSSyncClient {
	return &serviceDSSyncClient{cc}
}

func (c *serviceDSSyncClient) ListCompleted(ctx context.Context, in *ListCompletedRequest, opts ...grpc.CallOption) (*ListCompletedResponse, error) {
	out := new(ListCompletedResponse)
	err := grpc.Invoke(ctx, "/ds_sync.ServiceDSSync/ListCompleted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDSSyncClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (ServiceDSSync_DownloadFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ServiceDSSync_serviceDesc.Streams[0], c.cc, "/ds_sync.ServiceDSSync/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceDSSyncDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceDSSync_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type serviceDSSyncDownloadFileClient struct {
	grpc.ClientStream
}

func (x *serviceDSSyncDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ServiceDSSync service

type ServiceDSSyncServer interface {
	ListCompleted(context.Context, *ListCompletedRequest) (*ListCompletedResponse, error)
	DownloadFile(*DownloadFileRequest, ServiceDSSync_DownloadFileServer) error
}

func RegisterServiceDSSyncServer(s *grpc.Server, srv ServiceDSSyncServer) {
	s.RegisterService(&_ServiceDSSync_serviceDesc, srv)
}

func _ServiceDSSync_ListCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDSSyncServer).ListCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ds_sync.ServiceDSSync/ListCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDSSyncServer).ListCompleted(ctx, req.(*ListCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDSSync_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceDSSyncServer).DownloadFile(m, &serviceDSSyncDownloadFileServer{stream})
}

type ServiceDSSync_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type serviceDSSyncDownloadFileServer struct {
	grpc.ServerStream
}

func (x *serviceDSSyncDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ServiceDSSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ds_sync.ServiceDSSync",
	HandlerType: (*ServiceDSSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCompleted",
			Handler:    _ServiceDSSync_ListCompleted_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _ServiceDSSync_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptorServer) }

var fileDescriptorServer = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x51, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x75, 0x9b, 0x68, 0x75, 0x4c, 0x2f, 0x6b, 0x94, 0x50, 0xac, 0x94, 0x9c, 0xea, 0xc1, 0x20,
	0xf5, 0x0f, 0x62, 0x11, 0x84, 0x82, 0x92, 0xdc, 0xbc, 0x48, 0xd2, 0x8c, 0x18, 0x1a, 0x77, 0x63,
	0x66, 0xab, 0xd4, 0x2f, 0xf0, 0x7b, 0xfc, 0x42, 0x37, 0xdb, 0x54, 0x52, 0x69, 0x6f, 0x33, 0xef,
	0xbd, 0x7d, 0xcb, 0x7b, 0x03, 0x0e, 0x61, 0xf5, 0x81, 0x55, 0x50, 0x56, 0x52, 0x49, 0xde, 0xcd,
	0xe8, 0x99, 0x96, 0x62, 0xe6, 0x9f, 0x81, 0x3b, 0xcd, 0x49, 0xdd, 0xca, 0xb7, 0xb2, 0x40, 0x85,
	0x59, 0x84, 0xef, 0x0b, 0x24, 0xe5, 0x5f, 0xc1, 0xe9, 0x3f, 0x9c, 0x4a, 0x29, 0x08, 0xb9, 0x0b,
	0xfb, 0x2f, 0x79, 0x81, 0xe4, 0xb1, 0xa1, 0x35, 0x3a, 0x8a, 0x56, 0x8b, 0x7f, 0x09, 0x27, 0x13,
	0xf9, 0x29, 0x0a, 0x99, 0x64, 0x77, 0x1a, 0x68, 0x5c, 0x38, 0x07, 0xbb, 0xe6, 0xb5, 0x96, 0x69,
	0xad, 0x99, 0xfd, 0x6f, 0x06, 0xee, 0xa6, 0xb6, 0x71, 0x1e, 0xc2, 0x31, 0xe5, 0x5f, 0x78, 0x2f,
	0xc2, 0xa5, 0x32, 0xfe, 0x6c, 0x64, 0x45, 0x6d, 0x88, 0x7b, 0xd0, 0x4d, 0x8b, 0x64, 0x8e, 0xe3,
	0xd0, 0xeb, 0x68, 0xd6, 0x89, 0xd6, 0x6b, 0xfd, 0x51, 0x96, 0xa8, 0xc4, 0xb3, 0x0c, 0x6c, 0xe6,
	0xda, 0x2f, 0xa7, 0x69, 0xa2, 0x43, 0xbc, 0x2e, 0xc4, 0xdc, 0xb3, 0x35, 0x75, 0x18, 0xb5, 0xa1,
	0xf1, 0x0f, 0x83, 0x5e, 0xac, 0x6b, 0xc9, 0x67, 0x38, 0x89, 0x63, 0x5d, 0x07, 0x7f, 0x84, 0xde,
	0x46, 0x6c, 0x3e, 0x08, 0x9a, 0xa6, 0x82, 0x6d, 0x35, 0xf5, 0x2f, 0x76, 0xd1, 0xab, 0x4c, 0xfe,
	0x1e, 0x7f, 0x00, 0xa7, 0x9d, 0x96, 0x9f, 0xff, 0xbd, 0xd8, 0x52, 0x58, 0x7f, 0xb0, 0x83, 0x5d,
	0xdb, 0x5d, 0xb3, 0xd0, 0x7e, 0xea, 0x94, 0x69, 0x7a, 0x60, 0xee, 0x78, 0xf3, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x4d, 0xea, 0x66, 0x5b, 0xd7, 0x01, 0x00, 0x00,
}
